let
  var i: int := 10
  var s: string := "Hello"
  type intArr = array of int
  var arr: intArr := intArr[i-i] of 0

  type myrcd = {this: int, that: int}
  var myrcdv := myrcd{this=10, that=11}
  var myrcdnil: myrcd := nil

  type a = int
  type b = a
  type c = b
  type d = a


  type nested = {first: int, last: myrcd}

  var nestedv := nested{first=21, last= myrcd{this=10, that=11}}
  var nestedv2 := nested{first=32, last=myrcdv}
  var nestednil := nested{first=10, last=nil}
  var nestednilv2 := nested{first=10, last=myrcdnil}

  type mutref1 = {first: int, rest: int, other: mutref2}
  type mutref2 = {second: int, rest: int, other: mutref1}
  var mutref1v := mutref1{first=1, rest=2, other=mutref2{second=3, rest=4, other=nil}}
  var mutref2v := mutref2{second=1, rest=2, other=mutref1{first=3, rest=4, other=nil}}
 
  type selfref = {first: int, rest: int, other: string, another: selfref}
  var selfrefv := selfref{first=10, rest=0, other="Hiya", another=nil}

  function myfunc(k: int) : int =
    let var l: int := 10 in l end

  function reccy0(k: int) : int =
    if k < 10 then reccy0(k + 1) else k

  function reccy1(j: int) : int =
    if j < 10 then reccy2(j + 1) else j 

  function reccy2(j: int) : int =
    if j < 10 then reccy1(j + 1) else j 

  function myrcdf(m: myrcd) : int =
    if m = nil then 1 else 0

  function get() : myrcd = 
  if 1 then myrcd{this=10, that=11}
  else nil

  function getselfref() : selfref = 
  if 1 then selfref{first=10, rest=0, other="Tryme", another= getselfref()}
  else nil

  type list = {first: int, rest: list}

  function f(a: int, b: int) : int =
    if a=1 then b
    else if b=1 then a
    else a


  function merge(a: list, b: list) : list =
    if a=nil then b
    else if b=nil then a
    else if a.first < b.first
      then list{first=a.first, rest=merge(a.rest, b)}
      else list{first=b.first, rest=merge(a, b.rest)}

in
  myrcdf(myrcdv);
  if myrcdv = nil then 1 else 0;
  if nil = myrcdv then 1 else 0;
  myrcdv := nil;
  i := i+i+(2-3)/4*5;
  let var x := myrcdv.this + myrcdv.that in 2 * x end;
  if i > 0 then i := i * i;
  if i > 0 then i + 1 else i - 1;
  while i = 10 do i := i + 10;
  break;
  for k := 10 to 20 do (k + 1; i := i + 10);
  i := 10; arr[10] := i; i
end
